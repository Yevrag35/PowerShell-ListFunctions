<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MG.Collections</name>
    </assembly>
    <members>
        <member name="T:MG.Collections.ListCollection`1">
            <summary>
            An indentical implementation to <see cref="T:System.Collections.Generic.List`1"/> but with the ability for derived classes to override
            the Add, Insert, Set, and Remove methods.  Similar to the way <see cref="T:System.Collections.ObjectModel.Collection`1"/>
            allows.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:MG.Collections.ListCollection`1"/>.</typeparam>
        </member>
        <member name="E:MG.Collections.ListCollection`1.Reversed">
            <summary>
            An event that occurs when the <see cref="T:MG.Collections.ListCollection`1"/> is reversed through the 'Reverse' methods.
            </summary>
        </member>
        <member name="E:MG.Collections.ListCollection`1.Sorted">
            <summary>
            An event that occurs when the <see cref="T:MG.Collections.ListCollection`1"/> is sorted through the 'Sort' methods.
            </summary>
        </member>
        <member name="P:MG.Collections.ListCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index value for zero-based indexing.</param>
            <returns>
                The element at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0
                -or-
                <paramref name="index"/> is greater than or equal than <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </exception>
        </member>
        <member name="P:MG.Collections.ListCollection`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <returns>
                The number of elements that the <see cref="T:MG.Collections.ListCollection`1"/> can contain before resizing is required.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:MG.Collections.ListCollection`1.Capacity"/> is set to a value that is less than <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                There is not enough memory available on the system.
            </exception>
        </member>
        <member name="P:MG.Collections.ListCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <returns>
                The number of elements contained in the <see cref="T:MG.Collections.ListCollection`1"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ListCollection`1.#ctor">
            <summary>
            The default constructor.  Initializes an empty <see cref="T:MG.Collections.ListCollection`1"/> with the default capacity.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes an empty <see cref="T:MG.Collections.ListCollection`1"/> with the specified capacity.
            </summary>
            <param name="capacity">The number of elements that the new collection can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:MG.Collections.ListCollection`1"/> instance that contains elements copied from the specified
            collection and has sufficient capacity to accomodate the number of elements copied.
            </summary>
            <remarks>
                If <paramref name="items"/> is null, no exception is thrown, and, instead, an empty
                <see cref="T:MG.Collections.ListCollection`1"/> instance is initialized.
            </remarks>
            <param name="items">
                The collection whose elements will be copied to the <see cref="T:MG.Collections.ListCollection`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new <see cref="T:MG.Collections.ListCollection`1"/> instance that contains elements copied from the specified
            collection and has sufficient capacity to accomodate the number of elements copied.  It also provides an option to
            initialize the collection even if <paramref name="items"/> is <see langword="null"/>.
            </summary>
            <remarks>
                If <paramref name="items"/> is null and <paramref name="initializeIfNull"/> is 
                <see langword="false"/>, an <see cref="T:System.ArgumentNullException"/> exception is thrown.  If, however,
                <paramref name="initializeIfNull"/> is <see langword="true"/>, an empty
                <see cref="T:MG.Collections.ListCollection`1"/> instance is initialized with the default capacity instead.
            </remarks>
            <param name="items">
                The collection whose elements will be copied to the <see cref="T:MG.Collections.ListCollection`1"/>.
            </param>
            <param name="initializeIfNull">
                Indicates that the <see cref="T:MG.Collections.ListCollection`1"/> should be initialized even if <paramref name="items"/>
                is found to be <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="initializeIfNull"/> is <see langword="false"/> and
                <paramref name="items"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Add(`0)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="item">The object to be added to the end of the collection.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:MG.Collections.UniqueListBase`1"/>.  The value can be null for reference types.
            </param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:MG.Collections.UniqueListBase`1"/> to a compatible one-dimensional array, starting at
            the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from
            <see cref="T:MG.Collections.UniqueListBase`1"/>.  The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the target array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MG.Collections.ListCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the entire <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:MG.Collections.UniqueListBase`1"/>.  The value can be null for reference types.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Remove(`0)">
            <summary>
            Removes the specific object from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">
                The object to remove from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:MG.Collections.UniqueList`1"/> to a new array.
            </summary>
            <returns>
                An array containing copies of the elements of the <see cref="T:MG.Collections.UniqueList`1"/>.  If the list contains no elements, 
                an empty array is returned.
            </returns>
        </member>
        <member name="M:MG.Collections.ListCollection`1.TrueForAll(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether every element in the <see cref="T:MG.Collections.ReadOnlyList`1"/> matches the conditions
            defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
                <see langword="true"/>: if every element in the list matches the conditions defined; 
                otherwise, <see langword="false"/>.
                If the list has no elements, the return value is <see langword="true"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:MG.Collections.ListCollection`1"/> for an element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate.  The value can be <see langword="null"/> for reference types.</param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ListCollection`1"/>,
                if <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than <paramref name="item"/> or, if there is no
                larger element, the bitwise complement of <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find
                an implementation of the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/>
                interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:MG.Collections.ListCollection`1"/> for an element using the specified comparer and
            returns the zero-based index of the elements.
            </summary>
            <param name="item">The object to locate.  The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
                -or-
                <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ListCollection`1"/>, if
                <paramref name="item"/> is found; otherwise, a negative number that is bitwise complement of the index
                of the next element that is larger than <paramref name="item"/> or, if there is no larger element, the
                bitwise complement of <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is <see langword="null"/>, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/>
                interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
                Searches a range of elements in the sorted <see cref="T:MG.Collections.ListCollection`1"/>
                for an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements.
                -or-
                <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ListCollection`1"/>, if
                <paramref name="item"/> is found; otherwise, a negative number that is bitwise complement of the index
                of the next element that is larger than <paramref name="item"/> or, if there is no larger element, the
                bitwise complement of <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the
                <see cref="T:MG.Collections.ListCollection`1"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is <see langword="null"/>, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/>
                interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current <see cref="T:MG.Collections.ListCollection`1"/> to another
                type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">
                The type of the elements of the target array.
            </typeparam>
            <param name="converter">
                A <see cref="T:System.Converter`2"/> delegate that converts each element from one type
                to another type.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted elements from the
                current <see cref="T:MG.Collections.ListCollection`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.CopyTo(`0[])">
            <summary>
            Copies the entire <see cref="T:MG.Collections.ListCollection`1"/> to a compatible one-dimensional array, starting at the
            beginning of the target array.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from
                <see cref="T:MG.Collections.ListCollection`1"/>.  The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:MG.Collections.ListCollection`1"/> is greater than the number of
                elements that the destination array can contain.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the <see cref="T:MG.Collections.ListCollection`1"/> to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="index">
                The zero-based index in the source <see cref="T:MG.Collections.ListCollection`1"/> at which copying begins.
            </param>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from
                <see cref="T:MG.Collections.ListCollection`1"/>.  The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> is equal to or greater than <see cref="P:MG.Collections.ListCollection`1.Count"/> of the source <see cref="T:MG.Collections.ListCollection`1"/>.
                -or-
                The number of elements from <paramref name="index"/> to the end of the source <see cref="T:MG.Collections.ListCollection`1"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination array.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <param name="action">
                The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:MG.Collections.ListCollection`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
                An element in the collection has been modified.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:MG.Collections.ListCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">
                The collection whose elements should be insert into the <see cref="T:MG.Collections.ListCollection`1"/>.  The collection
                itself cannot be <see langword="null"/>, but it can contain elements that are <see langword="null"/>, if 
                type <typeparamref name="T"/> is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.RemoveAll(System.Func{`0,System.Boolean})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the elements to remove.
            </param>
            <returns>
                The number of elements removed from the <see cref="T:MG.Collections.ListCollection`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements
                in the <see cref="T:MG.Collections.ListCollection`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:MG.Collections.ListCollection`1"/>,
            if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains elements that
                match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the 
                elements to search for.
            </param>
            <returns>
            <see langword="true"/>:
                if the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains one or more elements that
                <paramref name="match"/> defined.
            <see langword="false"/>:
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Find(System.Func{`0,System.Boolean})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the
                elements to search for.
            </param>
            <returns>
                The first element that matches the conditions if found; otherwise the default value for <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all of the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.List`1"/> containing all of the elements that match the conditions if found; 
                otherwise, an empty list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the 
            specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that starts at the 
            specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the last occurrence within the
            entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The last elements that matches the conditions defined by the specified predicate, if found; otherwise, the default value for
                type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindLastIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the 
            specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.FindLastIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the entire
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:MG.Collections.ListCollection`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains <paramref name="count"/> number of elements and ends at
                <paramref name="index"/>, if found; otherwise, -1;
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in 
                the <see cref="T:MG.Collections.ListCollection`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.ListCollection`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the 
                <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type 
                <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.ListCollection`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                The implementation of <paramref name="comparer"/> caused an error during the sort. For example,
                <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the 
                <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> interface for type 
                <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:MG.Collections.ListCollection`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not specify a valid range in the <see cref="T:MG.Collections.ListCollection`1"/>.
                -or-
                The implementation of <paramref name="comparer"/> caused an error during the sort. For example,
                <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is <see langword="null"/>, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> 
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface or the <see cref="T:System.IComparable"/> 
                interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:MG.Collections.ListCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be <see langword="null"/> for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.ListCollection`1.Count"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.UniqueListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ListCollection`1.AddItem(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <param name="item">The object to add.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an elements into the <see cref="T:MG.Collections.ListCollection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.RemoveItem(`0)">
            <summary>
            Removes the specified element from the <see cref="T:MG.Collections.ListCollection`1"/>.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>
                <see langword="true"/> if <paramref name="item"/> is successfully removed; otherwise <see langword="false"/>.
                This method also returns <see langword="false"/> if <paramref name="item"/> was not found in 
                the <see cref="T:MG.Collections.ListCollection`1"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ListCollection`1.RemoveItemAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.OnReversed">
            <summary>
            The method that invokes the <see cref="E:MG.Collections.ListCollection`1.Reversed"/> event with -1 as the index and count.
            </summary>
        </member>
        <member name="M:MG.Collections.ListCollection`1.OnReversed(System.Int32,System.Int32)">
            <summary>
            The method that invoces the <see cref="E:MG.Collections.ListCollection`1.Reversed"/> event with the specified index and count of
            the Reverse operation.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.OnSorted(System.Collections.Generic.IComparer{`0},System.Int32,System.Int32)">
            <summary>
            The method that invokes the <see cref="E:MG.Collections.ListCollection`1.Sorted"/> event.
            </summary>
            <param name="index">The zero-based starting index of the range that was sorted.</param>
            <param name="count">The length of the range that was sorted.</param>
            <param name="comparerUsed">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that was used when comparing elements, or <see langword="null"/> to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MG.Collections.ListCollection`1.ToPredicate(System.Func{`0,System.Boolean})">
            <summary>
            Converts the given <see cref="T:System.Func`2"/> into a <see cref="T:System.Predicate`1"/> delegate.
            </summary>
            <param name="func">The function to convert.</param>
            <returns>
                A <see cref="T:System.Predicate`1"/> delegate converted from <paramref name="func"/>.
            </returns>
        </member>
        <member name="T:MG.Collections.ManagedKeySortedList`2">
            <summary>
            A <see cref="T:System.Collections.Generic.SortedList`2"/> class where <typeparamref name="TKey"/> is automatically retrieved with 
            a specified function from each <typeparamref name="TValue"/> element added.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <remarks>
                The set accessors' value must generate a <typeparamref name="TKey"/> key that equals <paramref name="key"/>, 
                otherwise, an <see cref="T:System.ArgumentException"/> is thrown.
            </remarks>
            <param name="key">The key whose value to get or set.</param>
            <returns>
                The value associated with the specified key. If the specified key is not found,
                the default value of <typeparamref name="TValue"/> is returned;
                A set operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The value's key provided to the set accessor does not match the original key.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an <see cref="T:System.Exception"/> when fed
                <paramref name="value"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> was not found in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</exception>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.  The 'set' accessor is not supported on the
            <see cref="T:MG.Collections.ManagedKeySortedList`2"/> class and will throw a
            <see cref="T:System.NotSupportedException"/> if attempted.
            </summary>
            <remarks>
                When negative indicies are specified, instead of starting at the zero-based position, 
                it will begin at the index of the last element of the 
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/> and count backwards.
            </remarks>
            <param name="index">
                The zero-based index (positive or negative) of the element to get or set.
            </param>
            <returns>
                The element at the specified or calculated index.
            </returns>
            <exception cref="T:System.ArgumentException">The value's key provided to the set accessor does not match the original key.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an <see cref="T:System.Exception"/> when fed
                <paramref name="value"/>.
            </exception>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>
            can contain.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:MG.Collections.ManagedKeySortedList`2.Capacity"/> is set to a value that is less
                than <see cref="P:MG.Collections.ManagedKeySortedList`2.Count"/>.
            </exception>
            <exception cref="T:System.OutOfMemoryException">There is not enough memory available on the system.</exception>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> for the managed key sorted list.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.IComparer`1"/> for the current <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </returns>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> has a fixed size.
            </summary>
            <returns>
                By default, this will return <see langword="false"/>, however, this value can be overridden
                in derived classes.
            </returns>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.IsReadOnly">
            <summary>
            Gets a value whether the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> is read-only.
            </summary>
            <remarks>
                By default, this will always be <see langword="false"/>, but the value can be overriden in
                derived types.
            </remarks>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>
            is synchronized (thread safe).
            </summary>
            <returns>
                This value will always return <see langword="false"/>.
            </returns>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>
            in sorted order.
            </summary>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <returns>
                The current instance.
            </returns>
        </member>
        <member name="P:MG.Collections.ManagedKeySortedList`2.KeySelector">
            <summary>
            The function that is used to retrieve a value of type <typeparamref name="TKey"/>
            from a given <typeparamref name="TValue"/> that is used as the sorted key.
            </summary>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.#ctor(System.Func{`1,`0})">
            <summary>
            The default constructor with the specified key selecting function.
            </summary>
            <param name="keySelector">
                The function that is executing on each <typeparamref name="TValue"/>
                in order to retrieve the <typeparamref name="TKey"/> value.
            </param>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.Add(`1)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="item">The item to be added to the end of the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <returns>
                <see langword="true"/> if <paramref name="item"/> was successfully added to the 
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                An exception adding <paramref name="item"/> created an
                <see cref="T:System.ArgumentException"/> that was not due to an existing key.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an exception.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> contains a specific value.
            </summary>
            <param name="item">
                The value to locate in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>. The value
                can be <see langword="null"/> for reference types.
            </param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> contains an element with
                the specified value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.IndexOf(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first
            occurrence within the entire <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="value">
                The value to locate in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>. The value
                can be <see langword="null"/> for reference types.
            </param>
            <returns>
                The zero-based index of the first occurrence of value within the entire 
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0. -or- <paramref name="index"/> is equal to or greater than
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.RemoveValue(`1)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="item">
                The object to remove from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </param>
            <returns>
                <see langword="true"/> if the item is successfully removed; otherwise, <see langword="false"/>. 
                This method also returns false if item was not found in the 
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an <see cref="T:System.Exception"/> when fed
                <paramref name="item"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> contains 
                an element with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:MG.Collections.ManagedKeySortedList`2"/> to a compatible one-dimensional
                array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied
                from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>. The <see cref="T:System.Array"/> must have 
                zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:MG.Collections.ManagedKeySortedList`2"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination array.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.GetValueOrDefault(`0)">
            <summary>
            Tries to get the value associated with the specified key in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>
                A <typeparamref name="TValue"/> instance. When the method is successful, the returned object is the
                value associated with the specified key. When the method fails,
                it returns the default value for <typeparamref name="TValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.GetValueOrDefault(`0,`1)">
            <summary>
            Tries to get the value associated with the specified key in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
                The default value to return when the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> 
                cannot find a value associated with the specified key.
            </param>
            <returns>
                A <typeparamref name="TValue"/> instance. When the method is successful, the returned object is the
                value associated with the specified key. When the method fails,
                it returns <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="key">The key to lcoate in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <returns>
                The zero-based index of <paramref name="key"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
               <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. This method also
               returns false if <paramref name="key"/> was not found in the original <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>,
                if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.
            </param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> contains 
                an element with the specified key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.TryAdd(`1)">
            <summary>
            Attempts to add the specified value to the end of the list.
            </summary>
            <remarks>
                Any exception that occurs is suppressed.
            </remarks>
            <param name="value">The element to add to the end of the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <returns>
                <see langword="true"/> if <paramref name="value"/> was added to the end of the list with the 
                calculated <typeparamref name="TKey"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MG.Collections.ManagedKeySortedList`2"/> values.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the values of the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.GetKey(`1)">
            <summary>
            Executes the stored <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> to retrieve the key from the specified item.
            </summary>
            <param name="item">The item to feed into the <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/>.</param>
            <returns>The key calculated from the <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an <see cref="T:System.Exception"/> when fed
                <paramref name="item"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.AddItem(`1)">
            <summary>
            Attempts to add the specified value to the end of the list.
            </summary>
            <param name="value">The element to add to the end of the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <returns>
                <see langword="true"/> if <paramref name="value"/> was added to the list with the 
                calculated <typeparamref name="TKey"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                An exception adding <paramref name="value"/> created an
                <see cref="T:System.ArgumentException"/> that was not due to an existing key.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an exception.
            </exception>
            <exception cref="T:MG.Collections.Exceptions.KeyAlreadyExistsException">
                The key resulting from <paramref name="value"/> was not unique.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.AddItem``1(``0,`1,System.Func{``0,`0})">
            <summary>
            Attemps to add the specified value to the end of the list.  Instead of using the stored function to retrieve the key,
            a separate function is specified from a new, generic input <typeparamref name="TInput"/>.
            </summary>
            <typeparam name="TInput">The generic type to retrieve <typeparamref name="TKey"/> from.</typeparam>
            <param name="input">The input value to retrieve the <typeparamref name="TKey"/> key from.</param>
            <param name="value">The value to store in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</param>
            <param name="keySelector">The function to retrieve the key from a <typeparamref name="TInput"/> value.</param>
            <returns>
                <see langword="true"/> if <paramref name="value"/> was added to the list with the 
                calculated <typeparamref name="TKey"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Either <paramref name="input"/> or <paramref name="keySelector"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an exception.
            </exception>
            <exception cref="T:MG.Collections.Exceptions.KeyAlreadyExistsException">
                The resulting <typeparamref name="TKey"/> value from <paramref name="keySelector"/> and <paramref name="input"/>
                is not unique.
            </exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.SetItem(`0,`1)">
            <summary>
            Sets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get or set.</param>
            <param name="value">The value to replace the original one with.</param>
            <returns>
                <see langword="true"/> if the calculated key from <see cref="M:MG.Collections.ManagedKeySortedList`2.GetKey(`1)"/> equals 
                <paramref name="key"/> and the original value was overwritten by <paramref name="value"/>;
                otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="P:MG.Collections.ManagedKeySortedList`2.KeySelector"/> threw an <see cref="T:System.Exception"/> when supplied
                <paramref name="value"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> was not found in the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.</exception>
        </member>
        <member name="M:MG.Collections.ManagedKeySortedList`2.RemoveItem(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </summary>
            <param name="key">
                The key to remove from the <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </param>
            <returns>
                <see langword="true"/> if the key and value are successfully removed; otherwise, <see langword="false"/>. 
                This method also returns false if <paramref name="key"/> was not found in the 
                <see cref="T:MG.Collections.ManagedKeySortedList`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MG.Collections.ReadOnlyList`1">
            <summary>
            A strongly typed, read-only list of objects that can be accessed by index and provides advanced methods for 
            searching and sorting through its contents.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MG.Collections.ReadOnlyList`1.InnerList">
            <summary>
            The internal backing <see cref="T:System.Collections.Generic.List`1"/> that all methods of <see cref="T:MG.Collections.ReadOnlyList`1"/> invoke against.
            </summary>
        </member>
        <member name="P:MG.Collections.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <returns>The number of elements contained within the <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
        </member>
        <member name="P:MG.Collections.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.  If <paramref name="index"/> is negative, then searching is done in reverse order.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index or the default value of <typeparamref name="T"/> if the index is out of range.</returns>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MG.Collections.ReadOnlyList`1"/> that is empty
            and has the default capacity.
            </summary>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:MG.Collections.ReadOnlyList`1"/> that is empty
            and has the specified capacity.
            </summary>
            <param name="capacity">The number of new elements the list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the elements
            copied from the specified collection.
            </summary>
            <param name="items">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted <see cref="T:MG.Collections.ReadOnlyList`1"/> for an element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate.  The value can be <see langword="null"/> for reference types.</param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ReadOnlyList`1"/>, if
                <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the index of
                the next element that is larger than <paramref name="item"/> or, if there is no larger element, the bitwise
                complement of <see cref="P:MG.Collections.ReadOnlyList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
                interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted <see cref="T:MG.Collections.ReadOnlyList`1"/> for an element using the specified comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate.  The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
                or <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ReadOnlyList`1"/>, if
                <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the index of
                the next element that is larger than <paramref name="item"/> or, if there is no larger element, the bitwise
                complement of <see cref="P:MG.Collections.ReadOnlyList`1.Count"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
                interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted <see cref="T:MG.Collections.ReadOnlyList`1"/> for an element using the specified comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate.  The value can be <see langword="null"/> for reference types.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
                or <see langword="null"/> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of <paramref name="item"/> in the sorted <see cref="T:MG.Collections.ReadOnlyList`1"/>, if
                <paramref name="item"/> is found; otherwise, a negative number that is the bitwise complement of the index of
                the next element that is larger than <paramref name="item"/> or, if there is no larger element, the bitwise
                complement of <see cref="P:MG.Collections.ReadOnlyList`1.Count"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0 -or- <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
                interface or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  The value can be null for reference types.
            </param>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current <see cref="T:MG.Collections.ReadOnlyList`1"/> to another type, and returns a list containing
            the converted elements.
            </summary>
            <typeparam name="TOutput">The <see cref="T:System.Type"/> of the elements of the target array.</typeparam>
            <param name="converter">
                A <see cref="T:System.Converter`2"/> delegate the converts each elements from one type to another type.
            </param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted elements from the current <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains elements that
                match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the 
                elements to search for.
            </param>
            <returns>
            <see langword="true"/>:
                if the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains one or more elements that
                <paramref name="match"/> defined.
            <see langword="false"/>:
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.Find(System.Func{`0,System.Boolean})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the
                elements to search for.
            </param>
            <returns>
                The first element that matches the conditions if found; otherwise the default value for <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all of the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.List`1"/> containing all of the elements that match the conditions if found; 
                otherwise, an empty list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the 
            specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that starts at the 
            specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the last occurrence within the
            entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The last elements that matches the conditions defined by the specified predicate, if found; otherwise, the default value for
                type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindLastIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the 
            specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.FindLastIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the entire
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the entire
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains <paramref name="count"/> number of elements and ends at
                <paramref name="index"/>, if found; otherwise, -1;
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:MG.Collections.ReadOnlyList`1"/> to a new array.
            </summary>
            <returns>
                An array containing copies of the elements of the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.TrueForAll(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether every element in the <see cref="T:MG.Collections.ReadOnlyList`1"/> matches the conditions
            defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
                <see langword="true"/>: if every element in the list matches the conditions defined; 
                otherwise, <see langword="false"/>.
                If the list has no elements, the return value is <see langword="true"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
        </member>
        <member name="T:MG.Collections.ReadOnlySet`1">
            <summary>
            An class that exposes only the read-only operations of a <see cref="T:System.Collections.Generic.HashSet`1"/>.
            </summary>
            <typeparam name="T">The type of elements contained in the set.</typeparam>
        </member>
        <member name="P:MG.Collections.ReadOnlySet`1.InnerSet">
            <summary>
            The inner set of values that is exposed as read-only.
            </summary>
        </member>
        <member name="M:MG.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            The default constructor wrapping the specified collection of elements using the default equality comparer
            for type <typeparamref name="T"/>.
            </summary>
            <param name="items">The collection of elements that is copied into the set.</param>
        </member>
        <member name="M:MG.Collections.ReadOnlySet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of <see cref="T:MG.Collections.ReadOnlySet`1"/> wrapping the specified collection of elements using
            the specified equality comparer for type <typeparamref name="T"/>.
            </summary>
            <param name="items">The collection of elements that is copied into the set.</param>
            <param name="comparer">The equality comparer used to determine element uniqueness.</param>
        </member>
        <member name="M:MG.Collections.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:MG.Collections.ReadOnlySet`1"/> object to an array,
            starting at the specified array index.
            </summary>
            <param name="newArray">
                The one-dimensional array that is the destination fo the elements copied from the
                <see cref="T:MG.Collections.ReadOnlySet`1"/> object.  The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newArray"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="arrayIndex"/> is greater than the length of <paramref name="newArray"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to serialize
            <see cref="T:MG.Collections.ReadOnlySet`1"/> object.
            </summary>
            <param name="info">
                A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize
                <see cref="T:MG.Collections.ReadOnlySet`1"/> object.
            </param>
            <param name="context">
                A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure that contains the source and destination of the serialized
                stream associated with the <see cref="T:MG.Collections.ReadOnlySet`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MG.Collections.ReadOnlySortableList`1">
            <summary>
            A read-only list whose contents don't change but can still be reversed and sorted.
            </summary>
            <typeparam name="T">The element type of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/>.</typeparam>
        </member>
        <member name="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer">
            <summary>
            The default <see cref="T:System.Collections.Generic.IComparer`1"/> implementation that the <see cref="T:MG.Collections.ReadOnlySortableList`1"/>
            uses to execute <see cref="M:MG.Collections.ReadOnlySortableList`1.Sort"/> when one is not provided.
            </summary>
            <returns>
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implements the list uses to execute <see cref="M:MG.Collections.ReadOnlySortableList`1.Sort"/>.
                If the set accessor was passed a <see langword="null"/> value, then the default comparer for type 
                <typeparamref name="T"/> is set instead.
            </returns>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that is empty, has
            the default capacity, and uses the default comparer for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that is empty, has
            the specified capacity, and uses the default comparer for <typeparamref name="T"/>.
            </summary>
            <param name="capacity">The number of new elements the list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that is empty, has the
            default capacity, and uses the specified comparer for <typeparamref name="T"/>.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
                to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that is empty, has the
            specified capacity, and uses the specified comparer for <typeparamref name="T"/>.
            </summary>
            <param name="capacity">The number of new elements the list can initially store.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
                to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that wraps the specified
            collection to make it read-only and uses the default comparer for <typeparamref name="T"/> for sorting
            operations.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> class that wraps the specified
            collection to make it read-only and uses the specified comparer for <typeparamref name="T"/> for sorting
            operations.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/>
                to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Reverse(System.Int32)">
            <summary>
            Reverse the order of the elements starting the specified index and extends to the last element.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0 or is <see cref="P:MG.Collections.ReadOnlyList`1.Count"/> or greater.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.ReadOnlyList`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.ArgumentException">
                The implementation of <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/> caused an error during the sort.  For example, <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/>
                might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
                generic interface of the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.ReadOnlySortableList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                The implementation of <paramref name="comparer"/> caused an error during the sort.  For example, <paramref name="comparer"/>
                might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find an implementation of the <see cref="T:System.IComparable`1"/>
                generic interface of the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Sort(System.Int32)">
            <summary>
            Sorts the elements starting at the specified index in the <see cref="T:MG.Collections.ReadOnlySortableList`1"/> 
            and extends to the last element using <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/>.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <exception cref="T:System.ArgumentException">
                The implementation of the <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/> caused an error during the sort.  For example, 
                <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0 or greater than the current count of elements in the list.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find an implementation of the 
                <see cref="T:System.IComparable`1"/> generic interface of the <see cref="T:System.IComparable"/> interface for 
                type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Sort(System.Int32,System.Int32)">
            <summary>
            Sorts the elements in the range of elements in <see cref="T:MG.Collections.ReadOnlySortableList`1"/> using 
            <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/>.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <exception cref="T:System.ArgumentException">
                The implementation of the <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/> caused an error during the sort.  For example, 
                <see cref="P:MG.Collections.ReadOnlySortableList`1.DefaultComparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0 -or- <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find an implementation of the 
                <see cref="T:System.IComparable`1"/> generic interface of the <see cref="T:System.IComparable"/> interface for 
                type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.ReadOnlySortableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the range of elements in <see cref="T:MG.Collections.ReadOnlySortableList`1"/> using the specified 
            comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> 
                to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                The implementation of <paramref name="comparer"/> caused an error during the sort.  For example, 
                <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0 -or- <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/> cannot find an implementation of the 
                <see cref="T:System.IComparable`1"/> generic interface of the <see cref="T:System.IComparable"/> interface for 
                type <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="T:MG.Collections.UniqueList`1">
            <summary>
            A class that provides the same functionality as <see cref="T:System.Collections.Generic.List`1"/>, but enforces every element to be
            unique according to the default or custom-defined equality comparer.
            </summary>
            <typeparam name="T">The element type in the <see cref="T:MG.Collections.UniqueList`1"/>.</typeparam>
        </member>
        <member name="P:MG.Collections.UniqueList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <remarks>
                If <paramref name="index"/> is negative, instead of starting at the zero-based position, the operation
                will start at the last index of the <see cref="T:MG.Collections.UniqueList`1"/> and count backwards.
            </remarks>
            <param name="index">The positive index value for zero-based indexing or negative value for reverse indexing.</param>
            <returns>
                For the get accessor, the element at the specified proper index if found; otherwise,
                    the default value of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor">
            <summary>
            The default constructor.  Initializes an empty list using the default 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor(System.Int32)">
            <summary>
            Initializes an empty <see cref="T:MG.Collections.UniqueList`1"/> with the specified capacity using the default
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <typeparamref name="T"/>.
            </summary>
            <param name="capacity">The number of elements that the new collection can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes an empty <see cref="T:MG.Collections.UniqueList`1"/> with the default capacity using the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to determine uniqueness.
            </summary>
            <param name="equalityComparer">The comparer used to define if an incoming element is unique.</param>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes an empty <see cref="T:MG.Collections.UniqueList`1"/> with the specified capacity using the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to determine uniqueness.
            </summary>
            <param name="capacity">The number of new elements the list can initially store.</param>
            <param name="equalityComparer">The comparer used to define if an incoming element is unique.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:MG.Collections.UniqueList`1"/> instance that contains elements copied from the specified
            collection and has sufficient capacity to accomodate the number of unique elements copied.
            </summary>
            <remarks>
                <paramref name="items"/> will be enumerated for uniqueness according to the default
                <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for type <typeparamref name="T"/>.
                
                If <paramref name="items"/> is null, no exception is thrown, and, instead, an empty
                <see cref="T:MG.Collections.UniqueList`1"/> instance is initialized.
            </remarks>
            <param name="items">
                The collection whose elements will be enumerated for uniqueness and added
                to the list.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new <see cref="T:MG.Collections.UniqueList`1"/> instance that contains elements copied from the specified
            collection and has sufficient capacity to accomodate the number of unique elements copied.
            </summary>
            <remarks>
                <paramref name="collection"/> will be enumerated for uniqueness according to the provided 
                <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
                
                If <paramref name="collection"/> is null, no exception is thrown, and, instead, an empty
                <see cref="T:MG.Collections.UniqueList`1"/> instance is initialized.
            </remarks>
            <param name="collection">
                The collection whose elements will be enumerated for uniqueness and added
                to the list.
            </param>
            <param name="equalityComparer">
                The equality comparer that determines whether an element is unique.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:MG.Collections.UniqueList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be <see langword="null"/> for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.UniqueListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:MG.Collections.UniqueList`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.UniqueListBase`1.Count"/>.
            </exception>
        </member>
        <member name="T:MG.Collections.UniqueListBase`1">
            <summary>
            Provides the <see langword="abstract"/> base class to enforce uniqueness in generic collections.
            </summary>
        </member>
        <member name="F:MG.Collections.UniqueListBase`1.InnerList">
            <summary>
            The internal, backing <see cref="T:System.Collections.Generic.List`1"/> collection that all methods invoke against.
            </summary>
        </member>
        <member name="F:MG.Collections.UniqueListBase`1.InnerSet">
            <summary>
            The internal, backing <see cref="T:System.Collections.Generic.HashSet`1"/> set that determines uniqueness in the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="P:MG.Collections.UniqueListBase`1.Comparer">
            <summary>
            The equality comparer used to determine uniqueness in the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="P:MG.Collections.UniqueListBase`1.Count">
            <summary>
            Get the number of elements contained within the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that is empty
            and has the default initial capacity and default equality comparer for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that is empty
            and has the specified initial capacity and default equality comparer for <typeparamref name="T"/>.
            </summary>
            <param name="capacity">The number of elements that the new collection can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that
            contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> and has
            sufficient capacity to accommodate the number of elements copied and the default
            equality comparer for <typeparamref name="T"/>.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that is empty
            and has the default initial capacity and the specified equality comparer for <typeparamref name="T"/>.
            </summary>
            <param name="equalityComparer">
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the list, or
                <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the
                type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that is empty, has the specified
            initial capacity, and uses the specified equality comparer for the <typeparamref name="T"/> type.
            </summary>
            <param name="capacity">The number of elements that the new collection can initially store.</param>
            <param name="equalityComparer">
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the list, or
                <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the
                type <typeparamref name="T"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.UniqueListBase`1"/> class that uses the specified comparer for 
            the <typeparamref name="T"/> type, contains elements copied from the specified collection, and sufficient capacity
            to accommodate the number of elements copied.
            </summary>
            <remarks>
                If <paramref name="collection"/> is null, no exception is thrown, and, instead, an empty
                <see cref="T:MG.Collections.UniqueListBase`1"/> instance is initialized.
            </remarks>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <param name="equalityComparer">
                The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the list, or
                <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> implementation for the
                type <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Add(`0)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="item">The object to be added to the end of the collection.</param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:MG.Collections.UniqueListBase`1"/>.  The value can be null for reference types.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:MG.Collections.UniqueListBase`1"/> to a compatible one-dimensional array, starting at
            the specified index of the target array.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from
            <see cref="T:MG.Collections.UniqueListBase`1"/>.  The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in the target array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the entire <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:MG.Collections.UniqueListBase`1"/>.  The value can be null for reference types.</param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Remove(`0)">
            <summary>
            Removes the specific object from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">
                The object to remove from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:MG.Collections.UniqueList`1"/> to a new array.
            </summary>
            <returns>
                An array containing copies of the elements of the <see cref="T:MG.Collections.UniqueList`1"/>.  If the list contains no elements, 
                an empty array is returned.
            </returns>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.TrueForAll(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether every element in the <see cref="T:MG.Collections.ReadOnlyList`1"/> matches the conditions
            defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
                <see langword="true"/>: if every element in the list matches the conditions defined; 
                otherwise, <see langword="false"/>.
                If the list has no elements, the return value is <see langword="true"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains elements that
                match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the 
                elements to search for.
            </param>
            <returns>
            <see langword="true"/>:
                if the <see cref="T:MG.Collections.ReadOnlyList`1"/> contains one or more elements that
                <paramref name="match"/> defined.
            <see langword="false"/>:
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Find(System.Func{`0,System.Boolean})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the
                elements to search for.
            </param>
            <returns>
                The first element that matches the conditions if found; otherwise the default value for <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all of the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                An <see cref="T:System.Collections.Generic.List`1"/> containing all of the elements that match the conditions if found; 
                otherwise, an empty list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the 
            specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified predicate, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that starts at the 
            specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the conditions defined
                by <paramref name="match"/> if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the last occurrence within the
            entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The last elements that matches the conditions defined by the specified predicate, if found; otherwise, the default value for
                type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindLastIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the 
            specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.FindLastIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified predicate, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the conditions defined by
                <paramref name="match"/>, if found; otherwise, -1.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section of the list.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="count"/> is less than 0.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the first occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the entire <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the entire
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/>, if found; otherwise -1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ReadOnlyList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The zero-based index of the last occurrence of <paramref name="item"/> within the range of elements in the
                <see cref="T:MG.Collections.ReadOnlyList`1"/> that contains <paramref name="count"/> number of elements and ends at
                <paramref name="index"/>, if found; otherwise, -1;
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is outside the range of valid indexes for the <see cref="T:MG.Collections.ReadOnlyList`1"/>.
                -or-
                <paramref name="count"/> is less than 0.
                -or-
                <paramref name="index"/> and <paramref name="count"/> do not specify a vliad section in the list.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this <see cref="T:MG.Collections.UniqueListBase`1"/> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.UniqueListBase`1"/> is a proper subset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this <see cref="T:MG.Collections.UniqueListBase`1"/> object is a proper superset of the specified collection.
            </summary>
            <param name="other">The collection compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.UniqueListBase`1"/> is a proper superset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this <see cref="T:MG.Collections.UniqueListBase`1"/> object is a subset of the specified collection.
            </summary>
            <param name="other">The collection compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.UniqueListBase`1"/> is a subset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this <see cref="T:MG.Collections.UniqueListBase`1"/> object is a superset of the specified collection.
            </summary>
            <param name="other">The collection compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.UniqueListBase`1"/> is a superset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:MG.Collections.UniqueListBase`1"/> object and a specified collection share
            common elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"/> if the <see cref="T:MG.Collections.UniqueListBase`1"/> and <paramref name="other"/> share at least
                one common element; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether this <see cref="T:MG.Collections.UniqueListBase`1"/> object and the specified collection contain
            the same elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:MG.Collections.UniqueListBase`1"/>.</param>
            <returns>
                <see langword="true"> if the <see cref="T:MG.Collections.UniqueListBase`1"/> object is equal to <paramref name="other"/>;
                otherwise, <see langword="false"/>.</see>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.AddItem(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">The object to add.</param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.GetByIndex(System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the element of type <typeparamref name="T"/> at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:MG.Collections.UniqueListBase`1"/> and count backwards.
                
                Can be overridden for different behavior.
            </remarks>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The element of type <typeparamref name="T"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then the default value of <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an elements into the <see cref="T:MG.Collections.UniqueListBase`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.RemoveItem(`0)">
            <summary>
            Removes the specified element from the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </summary>
            <param name="item">The element to remove.</param>
            <returns>
                <see langword="true"/> if <paramref name="item"/> is successfully removed; otherwise <see langword="false"/>.
                This method also returns <see langword="false"/> if <paramref name="item"/> was not found in 
                the <see cref="T:MG.Collections.UniqueListBase`1"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.RemoveItemAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                -or-
                <paramref name="index"/> is equal to or greater than <see cref="P:MG.Collections.UniqueListBase`1.Count"/>.
            </exception>
        </member>
        <member name="M:MG.Collections.UniqueListBase`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than zero
                -or
                <paramref name="index"/> is greater than <see cref="P:MG.Collections.UniqueListBase`1.Count"/>.
            </exception>
        </member>
        <member name="P:MG.Collections.Events.SortedEventArgs`1.Comparer">
            <summary>
            The comparer used to sort the list.
            </summary>
        </member>
        <member name="T:MG.Collections.Exceptions.FormattedException">
            <summary>
            An <see langword="abstract"/> exception class that provides a formatted base for message with arguments.
            </summary>
        </member>
        <member name="T:MG.Collections.Exceptions.KeyAlreadyExistsException">
            <summary>
            An exception thrown when an attempt to add a key to a unique list or dictionary that already exists.
            </summary>
        </member>
        <member name="T:MG.Collections.Exceptions.ReadOnlyException">
            <summary>
            The exception that is thrown indicating that a modifying operation was attempted against a 
            read-only collection.
            </summary>
        </member>
        <member name="M:MG.Collections.Exceptions.ReadOnlyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.Exceptions.ReadOnlyException"/> class.
            </summary>
        </member>
        <member name="M:MG.Collections.Exceptions.ReadOnlyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.Exceptions.ReadOnlyException"/> class with
            a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:MG.Collections.Exceptions.ReadOnlyException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MG.Collections.Exceptions.ReadOnlyException"/> class with
            a specified error message and a reference to the inner exception that is the 
            cause of this exception.
            </summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:MG.Collections.Extensions.NonGeneric.ListIndexExtensions.GetByIndex``2(``1,System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the element of type <typeparamref name="TItem"/> at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:System.Collections.Generic.IList`1"/> and count backwards.
            </remarks>
            <typeparam name="TList">
                The type of <see cref="T:System.Collections.Generic.IList`1"/> where <paramref name="index"/> 
                will be used on.
            </typeparam>
            <typeparam name="TItem">The element type of <paramref name="list"/>.</typeparam>
            <param name="list">The list which the index will be verified against.</param>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The element of type <typeparamref name="TItem"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then the default value of <typeparamref name="TItem"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.Extensions.NonGeneric.ListIndexExtensions.GetFromProperIndex``2(``0,System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the element of type <typeparamref name="TItem"/> at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:System.Collections.ObjectModel.Collection`1"/> and count backwards.
            </remarks>
            <typeparam name="TCollection">
                The type of <see cref="T:System.Collections.ObjectModel.Collection`1"/> where <paramref name="index"/> 
                will be used on.
            </typeparam>
            <typeparam name="TItem">The element type of <paramref name="collection"/>.</typeparam>
            <param name="collection">The collection which the index will be verified against.</param>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The element of type <typeparamref name="TItem"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then the default value of <typeparamref name="TItem"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.Extensions.NonGeneric.ListIndexExtensions.GetFromProperIndex(System.Collections.IList,System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the <see cref="T:System.Object"/> at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:System.Collections.IList"/> and count backwards.
            </remarks>
            <param name="list">The list which the index will be verified against.</param>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The <see cref="T:System.Object"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then <see langword="null"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.Extensions.List.ListOnlyIndexExtensions.GetByIndex``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the element of type <typeparamref name="TItem"/> at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:System.Collections.Generic.IList`1"/> and count backwards.
            </remarks>
            <typeparam name="TItem">The element type of <paramref name="list"/>.</typeparam>
            <param name="list">The list which the index will be verified against.</param>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The element of type <typeparamref name="TItem"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then the default value of <typeparamref name="TItem"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.Extensions.ReadOnly.InterfaceReadOnlyListIndexExtensions.GetFromProperIndex``2(``0,System.Int32)">
            <summary>
            Transforms and verifies the specified negative or positive index into a proper <see cref="T:System.Int32"/> value
            returning the <typeparamref name="TItem"/> item at the proper index location.
            </summary>
            <remarks>
                Used for transforming negative index <see cref="T:System.Int32"/> values into postive index positions.  When
                negative indicies are specified, instead of starting the zero-based position, it will begin at the 
                index of the last element of the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> and count backwards.
            </remarks>
            <typeparam name="TReadOnlyList">
                The type of <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> where <paramref name="index"/> 
                will be used on.
            </typeparam>
            <typeparam name="TItem">The element type of <paramref name="list"/>.</typeparam>
            <param name="list">The list which the index will be verified against.</param>
            <param name="index">The negative or positive index value.</param>
            <returns>
                The element of type <typeparamref name="TItem"/> at the specified proper index position; otherwise, 
                if the index is determined to be out-of-range, then the default value of <typeparamref name="TItem"/>.
            </returns>
        </member>
        <member name="T:MG.Collections.IReadOnlySet`1">
            <summary>
            Provides a readonly abstraction of a set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.Contains(`0)">
            <summary>
            Determines if the set contains a specific item.
            </summary>
            <param name="item">The item to check if the set contains.</param>
            <returns>
                <see langword="true"/> if found; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                <see langword="true"/> if the current set is a proper subset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                <see langword="true"/> if the current set is a proper superset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                <see langword="true"/> if the current set is a subset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                <see langword="true"/> if the current set is a superset of <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                <see langword="true"/> if the current set and <paramref name="other"/> share at least one
                common element; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MG.Collections.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns>
                <see langword="true"/> if the current set is equal to <paramref name="other"/>;
                otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:MG.Collections.IReadOnlySortableList`1">
            <summary>
            Represents a read-only indexable collection whose contents don't change but can still be reversed and sorted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MG.Collections.IReadOnlySortableList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.IReadOnlySortableList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:MG.Collections.IReadOnlySortableList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the default comparer.
            </summary>
        </member>
        <member name="M:MG.Collections.IReadOnlySortableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> to 
                use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MG.Collections.IReadOnlySortableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the range of elements in <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="T:MG.Collections.ISearchableList`1">
            <summary>
            Represents a collection that can be searched through and exposes advanced searching methods
            to accommodate this.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  The value can be null for reference types.
            </param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether the <see cref="T:MG.Collections.ISearchableList`1"/> contains elements that
                match the conditions defined by the specified condition.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the 
                elements to search for.
            </param>
            <returns>
            <see langword="true"/>:
                if the <see cref="T:MG.Collections.ISearchableList`1"/> contains one or more elements that
                <paramref name="match"/> defined.
            <see langword="false"/>:
                otherwise.
            </returns>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.Find(System.Func{`0,System.Boolean})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                condition, and returns the first occurrence within the entire <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Func`2"/> delegate that defines the conditions of the
                elements to search for.
            </param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Retrieves all of the elements that match the conditions defined by the specified condition.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified condition, and returns the zero-based
            index of the first occurrence within the entire <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified condition, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that extends from the 
            specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an element that match the conditions defined by the specified condition, and returns the zero-based
            index of the first occurrence within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that starts at the 
            specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindLast(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified condition, and returns the last occurrence within the
            entire <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindLastIndex(System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified condition, and returns the zero-based index of the
            lat occurrence within the entire <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindLastIndex(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified condition, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that extends from the first element to the 
            specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.FindLastIndex(System.Int32,System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            Searches for an elements that matches the conditions defined by the specified condition, and returns the zero-based index of the
            lat occurrence within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Func`2"/> delegate the defines the conditions of the elements to search for.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.IndexOf(`0,System.Int32)">
            /// <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence
            within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the search.  0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the entire <see cref="T:MG.Collections.ISearchableList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence
            within the range of elements in the <see cref="T:MG.Collections.ISearchableList`1"/> that contains the specified number
            of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:MG.Collections.ISearchableList`1"/>.  
                The value can be <see langword="null"/> for reference types.
            </param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
        </member>
        <member name="M:MG.Collections.ISearchableList`1.TrueForAll(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether every element in the <see cref="T:MG.Collections.ISearchableList`1"/> matches the conditions
            defined by the specified condition.
            </summary>
            <param name="match">The <see cref="T:System.Func`2"/> delegate that defines the conditions to check against the elements.</param>
        </member>
        <member name="T:MG.Collections.ISortableList`1">
            <summary>
            Represents a collection that can reversed and sorted.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MG.Collections.ISortableList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/>.
            </summary>
        </member>
        <member name="M:MG.Collections.ISortableList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:MG.Collections.ISortableList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the default comparer.
            </summary>
        </member>
        <member name="M:MG.Collections.ISortableList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
        <member name="M:MG.Collections.ISortableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the range of elements in <see cref="T:MG.Collections.IReadOnlySortableList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, or null to use the default comparer
                <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
        </member>
    </members>
</doc>
